vs[[1]][length(vs[[1]])] <- as.roman(vs[[1]][length(vs[[1]])])
if(!is.na(vs[[1]][length(vs[[1]])])){
vs[[1]][length(vs[[1]])] <- as.numeric(vs[[1]][length(vs[[1]])])
## attach the deromanized digits to the end
name <- paste(vs[[1]], collapse = " ")
}
## check if the name starts with digits, if yes move it to the end
if(str_detect(name, "^\\d")){
name <- paste(str_remove(name, "^\\d+"), str_extract(name, "^\\d+"))
}
## remove 0s from the numbers starting with 0s
if(str_detect(name, "\\d+$")){
sufix <- str_extract(name, "\\d+$")
non_zeros <- gsub(x = sufix, pattern = "^0+", replacement = "")
name <- str_replace(name, sufix, non_zeros)
}
## now, remove all special characters, squish, and trim
name <- gsub(x = name, pattern = "[^[:alnum:]]", replacement = "") %>%
str_squish() %>%
str_trim()
if (name == ""){return(NA)}
return(name)
}
do.call(benchmark,
c(tests, list(replications = 100,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
do.call(benchmark,
c(tests, list(replications = 50,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
a <- "BLACK & WHITE"
gsub("&", "AND", a)
gsub("\\(?<=[A-Z]\\)\\s+&\\s+\\(?=[A-Z]\\)", "AND", a)
gsub("\\(?<=[A-Z]*\\)\\s+&\\s+\\(?=[A-Z]\\)", "AND", a)
gsub("\\(?<=[A-Z]*\\)\\s+&\\s+\\(?=[A-Z]*\\)", "AND", a)
gsub("\\(?<=[A-Z]*\\)\\s+&\\s+\\(?=[A-Z]\\)", " AND ", a)
gsub("BLACK\\s+&\\s+\\(?=[A-Z]\\)", " AND ", a)
gsub("BLACK\\s+&\\s+WHITE)", " AND ", a)
gsub("\\s+&\\s+)", " AND ", a)
gsub("\\s+\&\\s+)", " AND ", a)
gsub("\\s+\\&\\s+)", " AND ", a)
gsub("\\(?<=[A-Z]\\)&(?=[A-Z]\\)", "AND", a)
gsub("\\(?<=[A-Z]\\)&\\(?=[A-Z]\\)", "AND", a)
gsub("&", "AND", a)
gsub("\\(?<=[A-Z]\\)&\\(?=[A-Z]\\)", "AND", a)
gsub("&", "AND", a)
gsub(pattern = "\\(?<=[A-Z]\\)\\s+&\\s+\\(?=[A-Z]\\)", replacement = " AND ", x = a)
regexplain:::regexplain_addin()
#' @export
#' @rdname normalize2
normalize_shipname2 <- function(name, ...) {
if (is.na(name) | (name != name) | (name == "")){
return(NA)
}
## turn to upper cases
name <- toupper(name)
## remove nasty charcters, white space
name <- unidecode(name, language = "all") %>%
enc2utf8() %>%
str_squish() %>%
str_trim() %>%
gsub(x = ., "\\n", "") %>%
gsub(x = ., "\\r", "")
## remove fishing vessel code
name <- gsub(x = name, pattern = "MFV[^\\w]+", replacement = "")  ## fishing vessel code in English
name <- gsub(x = name, pattern = "MPV[^\\w]+", replacement = "")  ## fishing vessel code in English
name <- gsub(x = name, pattern = "HMS[^\\w]+", replacement = "")  ## fishing vessel code in English
name <- gsub(x = name, pattern = "LPG[/|C]*[\\W]*|LNG[/|C]*[\\W]*", replacement = "")  ## LPG/LNG variations
name <- gsub(x = name, pattern = "(\\s|^)F[^\\w\\s]*V[^\\w]*", replacement = "")   ## fishing vessel code in English (F/V, F-V, F.V, FV: etc)
name <- gsub(x = name, pattern = "^F[^\\w\\s]*B[^\\w]+", replacement = "")   ## fishing vessel code in English
name <- gsub(x = name, pattern = " F[^\\w\\s]*B[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*P[^\\w]+", replacement = "")   ## fishing vessel code in Italy/Spain
name <- gsub(x = name, pattern = " M[^\\w\\s]*P[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*B[^\\w]+", replacement = "")   ## fishing vessel code in Italy/Spain
name <- gsub(x = name, pattern = " M[^\\w\\s]*B[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^G[^\\w\\s]*V[^\\w]+", replacement = "")   ## mostly in UK
name <- gsub(x = name, pattern = "S+F+[^\\w]+G[^\\w\\s]*V[^\\w]*", replacement = "")
name <- gsub(x = name, pattern = " G[^\\w\\s]*V[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*V[^\\w]+", replacement = "")   ## in English
name <- gsub(x = name, pattern = " M[^\\w\\s]*V[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]+S[^\\w]+", replacement = "")   ## Merchant Ship
name <- gsub(x = name, pattern = " M[^\\w\\s]+S[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*K[^\\w]+", replacement = "")   ## mostly in northern europe
name <- gsub(x = name, pattern = " M[^\\w\\s]+K[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^R[^\\w\\s]*V[^\\w]+", replacement = "")   ## Research Vessel
name <- gsub(x = name, pattern = " R[^\\w\\s]*V[^\\w]*(\\s|$)", replacement = "")
## Other prefixes
name <- gsub(x = name, "^T[^\\w\\s]*T[^\\w]+", replacement = "")  ## Tender To
name <- gsub(x = name, pattern = " T[^\\w\\s]*T[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^S[^\\w\\s]*Y[^\\w]+", replacement = "")   ## Steam Yacht
name <- gsub(x = name, pattern = " S[^\\w\\s]*Y[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*F[^\\w]+", replacement = "")  ## Motor Ferry
name <- gsub(x = name, pattern = " M[^\\w\\s]*F[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^S[^\\w\\s]*S[^\\w]+", replacement = "")  ## Steam Ship
name <- gsub(x = name, pattern = " S[^\\w\\s]*S[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^S[^\\w\\s]*V[^\\w]+", replacement = "")  ## Sailing Vessel
name <- gsub(x = name, pattern = " S[^\\w\\s]*V[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*T[^\\w]+", replacement = "")   ## Motor Tanker
name <- gsub(x = name, pattern = " M[^\\w\\s]*T[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]+Y[^\\w]+", replacement = "") ## Motor Yacht
name <- gsub(x = name, pattern = " M[^\\w\\s]+Y[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^[A-Z]/[A-Z][^\\w]+", replacement = "") ## All other types of X/X
name <- gsub(x = name, pattern = " [A-Z]/[A-Z]($)", replacement = "")
name <- gsub(x = name, pattern = "^[A-Z]\\\\[A-Z][^\\w]+", replacement = "")  ## All other types of X\X
name <- gsub(x = name, pattern = " [A-Z]\\\\[A-Z]($)", replacement = "")
## All additional information in parentheses and brackets
name <- gsub(x = name, pattern = "\\(.+\\)", replacement = "")
name <- gsub(x = name, pattern = "\\[.+\\]", replacement = "")
## Extract numbers from letters
name <- gsub(x = name, pattern = " ONE($)| UNO($)| UN($)", replacement = " 1")
name <- gsub(x = name, pattern = " TWO($)| DOS($)| DEUX($)", replacement = " 2")
name <- gsub(x = name, pattern = " THREE($)| TRES($)| TROIS($)", replacement = " 3")
name <- gsub(x = name, pattern = " FOUR($)| CUATRO($)| QUATRE($)", replacement = " 4")
name <- gsub(x = name, pattern = " FIVE($)| CINCO($)| CINQ($)", replacement = " 5")
name <- gsub(x = name, pattern = " SIX($)| SEIS($)| SIX($)", replacement = " 6")
name <- gsub(x = name, pattern = " SEVEN($)| SIETE($)| SEPT($)", replacement = " 7")
name <- gsub(x = name, pattern = " EIGHT($)| OCHO($)| HUIT($)", replacement = " 8")
name <- gsub(x = name, pattern = " NINE($)| NUEVE($)| NEUF($)", replacement = " 9")
name <- gsub(x = name, pattern = " TEN($)| DIEZ($)| DIX($)", replacement = " 10")
name <- gsub(x = name, pattern = " ELEVEN($)| ONCE($)| ONZE($)", replacement = " 11")
name <- gsub(x = name, pattern = " TWELVE($)| DOCE($)| DOUZE($)", replacement = " 12")
name <- gsub(x = name, pattern = " THIRTEEN($)| TRECE($)| TREIZE($)", replacement = " 13")
name <- gsub(x = name, pattern = " FOURTEEN($)| CATORCE($)| QUATORZE($)", replacement = " 14")
name <- gsub(x = name, pattern = " FIFTEEN($)| QUINCE($)| QUINZE($)", replacement = " 15")
## country specific appendix (korea)
name <- gsub(x = name, pattern = " HO($)", replacement = " ")
## remove NO.s such in NO.5, NO5, NO:5, NO. 5, NO 5, N5, N-5 etc
name <- gsub(x = name, pattern = "NO[\\w]*[[:punct:]?\\(?=\\d+\\)]", replacement = "")
name <- gsub(x = name, pattern = "N[\\w]*[[:punct:]?\\(?=\\d+\\)]", replacement = "")
## turn "&" to "AND"
name <- gsub(x = name, pattern = "&", replacement = "AND") ## replace "BLACK & WHITE" to "BLACK AND WHITE"
## deromanization
vs <- str_split(name, "\\s+|-|(?<=[A-Z]{3})\\.")
## if last word from the name text has L/C/D/M then do not deromanize
if (!str_detect(vs[[1]][length(vs[[1]])], "[LCDM]")){
if(str_detect(vs[[1]][length(vs[[1]])], "[IVX]")){
vs[[1]][length(vs[[1]])] <- as.roman(vs[[1]][length(vs[[1]])])
if(!is.na(vs[[1]][length(vs[[1]])])){
vs[[1]][length(vs[[1]])] <- as.numeric(vs[[1]][length(vs[[1]])])
## attach the deromanized digits to the end
name <- paste(vs[[1]], collapse = " ")
}
## check if the name starts with digits, if yes move it to the end
if(str_detect(name, "^\\d")){
name <- paste(str_remove(name, "^\\d+"), str_extract(name, "^\\d+"))
}
## remove 0s from the numbers starting with 0s
if(str_detect(name, "\\d+$")){
sufix <- str_extract(name, "\\d+$")
non_zeros <- gsub(x = sufix, pattern = "^0+", replacement = "")
name <- str_replace(name, sufix, non_zeros)
}
## now, remove all special characters, squish, and trim
name <- gsub(x = name, pattern = "[^[:alnum:]]", replacement = "") %>%
str_squish() %>%
str_trim()
if (name == ""){return(NA)}
return(name)
}
do.call(benchmark,
c(tests, list(replications = 50,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
#' @export
#' @rdname normalize2
normalize_shipname2 <- function(name, ...) {
if (is.na(name) | (name != name) | (name == "")){
return(NA)
}
## turn to upper cases
name <- toupper(name)
## remove nasty charcters, white space
name <- unidecode(name, language = "all") %>%
enc2utf8() %>%
str_squish() %>%
str_trim() %>%
gsub(x = ., "\\n", "") %>%
gsub(x = ., "\\r", "")
## remove fishing vessel code
name <- gsub(x = name, pattern = "MFV[^\\w]+", replacement = "")  ## fishing vessel code in English
name <- gsub(x = name, pattern = "MPV[^\\w]+", replacement = "")  ## fishing vessel code in English
name <- gsub(x = name, pattern = "HMS[^\\w]+", replacement = "")  ## fishing vessel code in English
name <- gsub(x = name, pattern = "LPG[/|C]*[\\W]*|LNG[/|C]*[\\W]*", replacement = "")  ## LPG/LNG variations
name <- gsub(x = name, pattern = "(\\s|^)F[^\\w\\s]*V[^\\w]*", replacement = "")   ## fishing vessel code in English (F/V, F-V, F.V, FV: etc)
name <- gsub(x = name, pattern = "^F[^\\w\\s]*B[^\\w]+", replacement = "")   ## fishing vessel code in English
name <- gsub(x = name, pattern = " F[^\\w\\s]*B[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*P[^\\w]+", replacement = "")   ## fishing vessel code in Italy/Spain
name <- gsub(x = name, pattern = " M[^\\w\\s]*P[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*B[^\\w]+", replacement = "")   ## fishing vessel code in Italy/Spain
name <- gsub(x = name, pattern = " M[^\\w\\s]*B[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^G[^\\w\\s]*V[^\\w]+", replacement = "")   ## mostly in UK
name <- gsub(x = name, pattern = "S+F+[^\\w]+G[^\\w\\s]*V[^\\w]*", replacement = "")
name <- gsub(x = name, pattern = " G[^\\w\\s]*V[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*V[^\\w]+", replacement = "")   ## in English
name <- gsub(x = name, pattern = " M[^\\w\\s]*V[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]+S[^\\w]+", replacement = "")   ## Merchant Ship
name <- gsub(x = name, pattern = " M[^\\w\\s]+S[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*K[^\\w]+", replacement = "")   ## mostly in northern europe
name <- gsub(x = name, pattern = " M[^\\w\\s]+K[^\\w]*(\\s|$)", replacement = "")
name <- gsub(x = name, pattern = "^R[^\\w\\s]*V[^\\w]+", replacement = "")   ## Research Vessel
name <- gsub(x = name, pattern = " R[^\\w\\s]*V[^\\w]*(\\s|$)", replacement = "")
## Other prefixes
name <- gsub(x = name, "^T[^\\w\\s]*T[^\\w]+", replacement = "")  ## Tender To
name <- gsub(x = name, pattern = " T[^\\w\\s]*T[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^S[^\\w\\s]*Y[^\\w]+", replacement = "")   ## Steam Yacht
name <- gsub(x = name, pattern = " S[^\\w\\s]*Y[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*F[^\\w]+", replacement = "")  ## Motor Ferry
name <- gsub(x = name, pattern = " M[^\\w\\s]*F[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^S[^\\w\\s]*S[^\\w]+", replacement = "")  ## Steam Ship
name <- gsub(x = name, pattern = " S[^\\w\\s]*S[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^S[^\\w\\s]*V[^\\w]+", replacement = "")  ## Sailing Vessel
name <- gsub(x = name, pattern = " S[^\\w\\s]*V[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]*T[^\\w]+", replacement = "")   ## Motor Tanker
name <- gsub(x = name, pattern = " M[^\\w\\s]*T[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^M[^\\w\\s]+Y[^\\w]+", replacement = "") ## Motor Yacht
name <- gsub(x = name, pattern = " M[^\\w\\s]+Y[^\\w]*($)", replacement = "")
name <- gsub(x = name, pattern = "^[A-Z]/[A-Z][^\\w]+", replacement = "") ## All other types of X/X
name <- gsub(x = name, pattern = " [A-Z]/[A-Z]($)", replacement = "")
name <- gsub(x = name, pattern = "^[A-Z]\\\\[A-Z][^\\w]+", replacement = "")  ## All other types of X\X
name <- gsub(x = name, pattern = " [A-Z]\\\\[A-Z]($)", replacement = "")
## All additional information in parentheses and brackets
name <- gsub(x = name, pattern = "\\(.+\\)", replacement = "")
name <- gsub(x = name, pattern = "\\[.+\\]", replacement = "")
## Extract numbers from letters
name <- gsub(x = name, pattern = " ONE($)| UNO($)| UN($)", replacement = " 1")
name <- gsub(x = name, pattern = " TWO($)| DOS($)| DEUX($)", replacement = " 2")
name <- gsub(x = name, pattern = " THREE($)| TRES($)| TROIS($)", replacement = " 3")
name <- gsub(x = name, pattern = " FOUR($)| CUATRO($)| QUATRE($)", replacement = " 4")
name <- gsub(x = name, pattern = " FIVE($)| CINCO($)| CINQ($)", replacement = " 5")
name <- gsub(x = name, pattern = " SIX($)| SEIS($)| SIX($)", replacement = " 6")
name <- gsub(x = name, pattern = " SEVEN($)| SIETE($)| SEPT($)", replacement = " 7")
name <- gsub(x = name, pattern = " EIGHT($)| OCHO($)| HUIT($)", replacement = " 8")
name <- gsub(x = name, pattern = " NINE($)| NUEVE($)| NEUF($)", replacement = " 9")
name <- gsub(x = name, pattern = " TEN($)| DIEZ($)| DIX($)", replacement = " 10")
name <- gsub(x = name, pattern = " ELEVEN($)| ONCE($)| ONZE($)", replacement = " 11")
name <- gsub(x = name, pattern = " TWELVE($)| DOCE($)| DOUZE($)", replacement = " 12")
name <- gsub(x = name, pattern = " THIRTEEN($)| TRECE($)| TREIZE($)", replacement = " 13")
name <- gsub(x = name, pattern = " FOURTEEN($)| CATORCE($)| QUATORZE($)", replacement = " 14")
name <- gsub(x = name, pattern = " FIFTEEN($)| QUINCE($)| QUINZE($)", replacement = " 15")
## country specific appendix (korea)
name <- gsub(x = name, pattern = " HO($)", replacement = " ")
## remove NO.s such in NO.5, NO5, NO:5, NO. 5, NO 5, N5, N-5 etc
name <- gsub(x = name, pattern = "NO[\\w]*[[:punct:]?\\(?=\\d+\\)]", replacement = "")
name <- gsub(x = name, pattern = "N[\\w]*[[:punct:]?\\(?=\\d+\\)]", replacement = "")
## turn "&" to "AND"
name <- gsub(x = name, pattern = "&", replacement = "AND") ## replace "BLACK & WHITE" to "BLACK AND WHITE"
## deromanization
vs <- str_split(name, "\\s+|-|(?<=[A-Z]{3})\\.")
## if last word from the name text has L/C/D/M then do not deromanize
if (!str_detect(vs[[1]][length(vs[[1]])], "[LCDM]")){
if(str_detect(vs[[1]][length(vs[[1]])], "[IVX]")){
vs[[1]][length(vs[[1]])] <- as.roman(vs[[1]][length(vs[[1]])])
if(!is.na(vs[[1]][length(vs[[1]])])){
vs[[1]][length(vs[[1]])] <- as.numeric(vs[[1]][length(vs[[1]])])
## attach the deromanized digits to the end
name <- paste(vs[[1]], collapse = " ")
}
## check if the name starts with digits, if yes move it to the end
if(str_detect(name, "^\\d")){
name <- paste(str_remove(name, "^\\d+"), str_extract(name, "^\\d+"))
}
## remove 0s from the numbers starting with 0s
if(str_detect(name, "\\d+$")){
sufix <- str_extract(name, "\\d+$")
non_zeros <- gsub(x = sufix, pattern = "^0+", replacement = "")
name <- str_replace(name, sufix, non_zeros)
}
## now, remove all special characters, squish, and trim
name <- gsub(x = name, pattern = "[^[:alnum:]]", replacement = "")
name <- gsub(x = name, pattern = "\\s*", replacement = "")
if (name == "") {
return(NA)
}
return(name)
}
do.call(benchmark,
c(tests, list(replications = 100,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
do.call(benchmark,
c(tests, list(replications = 1000,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
do.call(benchmark,
c(tests, list(replications = 500,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
devtools::document()
library(startR)
test
tests <- list(ship = expression(normalize_shipname("weird -+%()<>$;!&'`\\.#/0045")), ship2 = expression(normalize_shipname2("weird -+%()<>$;!&'`\\.#/0045")))
str <- "weird nombre Boat NO 4 -+%()<>$;!&'`\\.#/"
tests <- list(ship = expression(normalize_shipname(str)), ship2 = expression(normalize_shipname2(str)))
tests
do.call(benchmark,
c(tests, list(replications = 100,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
library(rbenchmark)
do.call(benchmark,
c(tests, list(replications = 100,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
do.call(benchmark,
c(devtools::test(), list(replications = 5,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
devtools::test()
devtools::document()
#' @export
#' @rdname normalize2
normalize_shipname2 <- function(name, ...) {
if (is.na(name) | (name != name) | (name == "")){
return(NA)
}
## turn to upper cases
name <- toupper(name)
## remove nasty charcters, white space
name <- unidecode(name, language = "all")
name <- enc2utf8(name)
name <- str_squish(name)
name <- str_trim(name)
name <- str_remove(name, "\n")
name <- str_remove(name, "\r")
## remove fishing vessel code
name <- str_remove(name, "MFV[^\\w]+")  ## fishing vessel code in English
name <- str_remove(name, "MPV[^\\w]+")  ## fishing vessel code in English
name <- str_remove(name, "HMS[^\\w]+")  ## fishing vessel code in English
name <- str_remove(name, "LPG[/|C]*[\\W]*|LNG[/|C]*[\\W]*")  ## LPG/LNG variations
name <- str_remove(name, "(\\s|^)F[^\\w\\s]*V[^\\w]*")   ## fishing vessel code in English (F/V, F-V, F.V, FV: etc)
name <- str_remove(name, "^F[^\\w\\s]*B[^\\w]+")   ## fishing vessel code in English
name <- str_remove(name, " F[^\\w\\s]*B[^\\w]*(\\s|$)")
name <- str_remove(name, "^M[^\\w\\s]*P[^\\w]+")   ## fishing vessel code in Italy/Spain
name <- str_remove(name, " M[^\\w\\s]*P[^\\w]*(\\s|$)")
name <- str_remove(name, "^M[^\\w\\s]*B[^\\w]+")   ## fishing vessel code in Italy/Spain
name <- str_remove(name, " M[^\\w\\s]*B[^\\w]*(\\s|$)")
name <- str_remove(name, "^G[^\\w\\s]*V[^\\w]+")   ## mostly in UK
name <- str_remove(name, "S+F+[^\\w]+G[^\\w\\s]*V[^\\w]*")
name <- str_remove(name, " G[^\\w\\s]*V[^\\w]*(\\s|$)")
name <- str_remove(name, "^M[^\\w\\s]*V[^\\w]+")   ## in English
name <- str_remove(name, " M[^\\w\\s]*V[^\\w]*(\\s|$)")
name <- str_remove(name, "^M[^\\w\\s]+S[^\\w]+")   ## Merchant Ship
name <- str_remove(name, " M[^\\w\\s]+S[^\\w]*(\\s|$)")
name <- str_remove(name, "^M[^\\w\\s]*K[^\\w]+")   ## mostly in northern europe
name <- str_remove(name, " M[^\\w\\s]+K[^\\w]*(\\s|$)")
name <- str_remove(name, "^R[^\\w\\s]*V[^\\w]+")   ## Research Vessel
name <- str_remove(name, " R[^\\w\\s]*V[^\\w]*(\\s|$)")
## Other prefixes
name <- str_remove(name, "^T[^\\w\\s]*T[^\\w]+")   ## Tender To
name <- str_remove(name, " T[^\\w\\s]*T[^\\w]*($)")
name <- str_remove(name, "^S[^\\w\\s]*Y[^\\w]+")   ## Steam Yacht
name <- str_remove(name, " S[^\\w\\s]*Y[^\\w]*($)")
name <- str_remove(name, "^M[^\\w\\s]*F[^\\w]+")   ## Motor Ferry
name <- str_remove(name, " M[^\\w\\s]*F[^\\w]*($)")
name <- str_remove(name, "^S[^\\w\\s]*S[^\\w]+")   ## Steam Ship
name <- str_remove(name, " S[^\\w\\s]*S[^\\w]*($)")
name <- str_remove(name, "^S[^\\w\\s]*V[^\\w]+")   ## Sailing Vessel
name <- str_remove(name, " S[^\\w\\s]*V[^\\w]*($)")
name <- str_remove(name, "^M[^\\w\\s]*T[^\\w]+")   ## Motor Tanker
name <- str_remove(name, " M[^\\w\\s]*T[^\\w]*($)")
name <- str_remove(name, "^M[^\\w\\s]+Y[^\\w]+")   ## Motor Yacht
name <- str_remove(name, " M[^\\w\\s]+Y[^\\w]*($)")
name <- str_remove(name, "^[A-Z]/[A-Z][^\\w]+")   ## All other types of X/X
name <- str_remove(name, " [A-Z]/[A-Z]($)")
name <- str_remove(name, "^[A-Z]\\\\[A-Z][^\\w]+")   ## All other types of X\X
name <- str_remove(name, " [A-Z]\\\\[A-Z]($)")
## All additional information in parentheses and brackets
name <- str_remove(name, "\\(.+\\)")
str_remove("\\[.+\\]")
## Extract numbers from letters
name <- str_replace(name, " ONE($)| UNO($)| UN($)", " 1")
name <- str_replace(name, " TWO($)| DOS($)| DEUX($)", " 2")
name <- str_replace(name, " THREE($)| TRES($)| TROIS($)", " 3")
name <- str_replace(name, " FOUR($)| CUATRO($)| QUATRE($)", " 4")
name <- str_replace(name, " FIVE($)| CINCO($)| CINQ($)", " 5")
name <- str_replace(name, " SIX($)| SEIS($)| SIX($)", " 6")
name <- str_replace(name, " SEVEN($)| SIETE($)| SEPT($)", " 7")
name <- str_replace(name, " EIGHT($)| OCHO($)| HUIT($)", " 8")
name <- str_replace(name, " NINE($)| NUEVE($)| NEUF($)", " 9")
name <- str_replace(name, " TEN($)| DIEZ($)| DIX($)", " 10")
name <- str_replace(name, " ELEVEN($)| ONCE($)| ONZE($)", " 11")
name <- str_replace(name, " TWELVE($)| DOCE($)| DOUZE($)", " 12")
name <- str_replace(name, " THIRTEEN($)| TRECE($)| TREIZE($)", " 13")
name <- str_replace(name, " FOURTEEN($)| CATORCE($)| QUATORZE($)", " 14")
name <- str_replace(name, " FIFTEEN($)| QUINCE($)| QUINZE($)", " 15")
## country specific appendix (korea)
name <- str_replace(name, " HO($)", " ")
## remove NO.s such in NO.5, NO5, NO:5, NO. 5, NO 5, N5, N-5 etc
name <- str_remove(name, "NO[^\\w\\s]*[\\s]*(?=\\d+)")
name <- str_remove(name, "[\\s]+N[\\W_0]*(?=\\d+)")
name <- str_remove(name, "NO\\.\\s*(?=[^0-9]+)")
## turn "&" to "AND"
name <- str_replace(name, "(?<=[A-Z])\\s+&\\s+(?=[A-Z])", " AND ") ## replace "BLACK & WHITE" to "BLACK AND WHITE"
## deromanization
vs <- str_split(name, "\\s+|-|(?<=[A-Z]{3})\\.")
## if last word from the name text has L/C/D/M then do not deromanize
if (!str_detect(vs[[1]][length(vs[[1]])], "[LCDM]")){
if(str_detect(vs[[1]][length(vs[[1]])], "[IVX]")){
vs[[1]][length(vs[[1]])] <- as.roman(vs[[1]][length(vs[[1]])])
if(!is.na(vs[[1]][length(vs[[1]])])){
vs[[1]][length(vs[[1]])] <- as.numeric(vs[[1]][length(vs[[1]])])
## attach the deromanized digits to the end
name <- paste(vs[[1]], collapse = " ")
}
## check if the name starts with digits, if yes move it to the end
if(str_detect(name, "^\\d")){
name <- paste(str_remove(name, "^\\d+"), str_extract(name, "^\\d+"))
}
## remove 0s from the numbers starting with 0s
if(str_detect(name, "\\d+$")){
sufix <- str_extract(name, "\\d+$")
non_zeros <- str_remove_all(sufix, "^0+")
name <- str_replace(name, sufix, non_zeros)
}
## now, remove all special characters, squish, and trim
name <- str_remove_all(name, "[^[:alnum:]]")
name <- str_squish(name)
name <- str_trim(name)
if (name == ""){return(NA)}
return(name)
}
devtools::document()
library(startR)
devtools::test()
devtools::document()
library(startR)
devtools::test()
test_that("normalize_shipname2", {
expect_true(is.na(normalize_shipname2(NA)))
expect_true(is.na(normalize_shipname2("")))
expect_equal(normalize_shipname2("MixEd"), "MIXED")
expect_equal(normalize_shipname2("weird -+%()<>$;!&'`\\.#/"), "WEIRD")
expect_equal(normalize_shipname2("  \tspaced  \nname      "), "SPACEDNAME")
expect_equal(normalize_shipname2("f/b boat f/v othername"), "BOATOTHERNAME")
expect_equal(normalize_shipname2("r/v boat othername"), "BOATOTHERNAME")
expect_equal(normalize_shipname2("no. boat"), "BOAT")
expect_equal(normalize_shipname2("no537 boat"), "BOAT537")
expect_equal(normalize_shipname2("boat IX"), "BOAT9")
expect_equal(normalize_shipname2("a"), "A")
expect_equal(normalize_shipname2("no"), "NO")
})
tests <- list(norm1 = expression(test_that("normalize_shipname", {
expect_true(is.na(normalize_shipname(NA)))
expect_true(is.na(normalize_shipname("")))
expect_equal(normalize_shipname("MixEd"), "MIXED")
expect_equal(normalize_shipname("weird -+%()<>$;!&'`\\.#/"), "WEIRD")
expect_equal(normalize_shipname("  \tspaced  \nname      "), "SPACEDNAME")
expect_equal(normalize_shipname("f/b boat f/v othername"), "BOATOTHERNAME")
expect_equal(normalize_shipname("r/v boat othername"), "BOATOTHERNAME")
expect_equal(normalize_shipname("no. boat"), "BOAT")
expect_equal(normalize_shipname("no537 boat"), "BOAT537")
expect_equal(normalize_shipname("boat IX"), "BOAT9")
expect_equal(normalize_shipname("a"), "A")
expect_equal(normalize_shipname("no"), "NO")
})),
norm2 = expression(test_that("normalize_shipname2", {
expect_true(is.na(normalize_shipname2(NA)))
expect_true(is.na(normalize_shipname2("")))
expect_equal(normalize_shipname2("MixEd"), "MIXED")
expect_equal(normalize_shipname2("weird -+%()<>$;!&'`\\.#/"), "WEIRD")
expect_equal(normalize_shipname2("  \tspaced  \nname      "), "SPACEDNAME")
expect_equal(normalize_shipname2("f/b boat f/v othername"), "BOATOTHERNAME")
expect_equal(normalize_shipname2("r/v boat othername"), "BOATOTHERNAME")
expect_equal(normalize_shipname2("no. boat"), "BOAT")
expect_equal(normalize_shipname2("no537 boat"), "BOAT537")
expect_equal(normalize_shipname2("boat IX"), "BOAT9")
expect_equal(normalize_shipname2("a"), "A")
expect_equal(normalize_shipname2("no"), "NO")
})))
tests
do.call(benchmark,
c(tests, list(replications = 5,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
library(rbenchmark)
do.call(benchmark,
c(tests, list(replications = 5,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
do.call(benchmark,
c(tests, list(replications = 50,
columns=c('test', 'elapsed', 'replications'),
order='elapsed')))
source('~/GitHub/startR/R/normalize.R')
#' @export
#' @rdname normalize
normalize_callsign <- function(callsign, ...) {
if (is.na(callsign) | (callsign != callsign) | (callsign == "")){
return(NA)
}
## turn to upper cases
callsign <- toupper(callsign)
## remove nasty charcters, white space
callsign <- unidecode(callsign, language = "all")
callsign <- enc2utf8(callsign)
callsign <- str_squish(callsign)
callsign <- str_trim(callsign)
callsign <- str_remove(callsign, "\n")
callsign <- str_remove(callsign, "\r")
callsign <- str_remove_all(callsign, "[^[:alnum:]]") %>% # Remove non-alphanumeric characters
callsign <- str_remove(callsign, "^0+") # Remove zeroes at the start
if(callsign == ""){return(NA)}
return(callsign)
}
devtools::test()
source('~/GitHub/startR/R/normalize.R')
devtools::test()
source('~/GitHub/startR/R/normalize.R')
devtools::test()
devtools::document()
devtools::test()
