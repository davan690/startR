lapply(packages, library)
apply(packages, library)
purrr::map(packages, library)
packages
length(packages)
library(packages)
library(packages[])
library(ggplot2)
ggplot(mtcars, aes(mpg, cyl)) + geom_point() + startR::ggtheme_plot()
source('~/GitHub/startR/R/ggtheme_plot.R', echo=TRUE)
ggplot(mtcars, aes(mpg, cyl)) + geom_point() + ggtheme_plot()
library(startR)
devtools::document()
devtools::build()
browseURL("C:/Users/JC/Dropbox%20(Personal)/Escuela/4PhD/5Fall18/ECON260A/docs/paper_proposal.pdf", browser = "C:/Program Files/RStudio/bin/sumatra/SumatraPDF.exe")
browseURL("C:/Users/JC/Dropbox (Personal)/Escuela/4PhD/5Fall18/ECON260A/docs/paper_proposal.pdf", browser = "C:/Program Files/RStudio/bin/sumatra/SumatraPDF.exe")
browseURL("file:///C:/Users/JC/Dropbox (Personal)/Escuela/4PhD/5Fall18/ECON260A/docs/paper_proposal.pdf", browser = "C:/Program Files/RStudio/bin/sumatra/SumatraPDF.exe")
browseURL("file:///C:/Users/JC/Dropbox (Personal)/Escuela/4PhD/5Fall18/ECON260A/docs/paper_proposal.pdf")
browseURL("C:/Users/JC/Dropbox (Personal)/Escuela/4PhD/5Fall18/ECON260A/docs/paper_proposal.pdf")
rmarkdown::render
source('~/GitHub/startR/R/ggtheme_map.R')
library(ggplot)
library(ggplot2)
ggplot(mtcars, aes(cyl, mpg)) + geom_point()
ggplot(mtcars, aes(cyl, mpg)) + geom_point() + ggtheme_plot()
ggplot(mtcars, aes(cyl, mpg)) + geom_point() + ggtheme_map()
source('~/GitHub/startR/R/ggtheme_plot.R')
ggplot(mtcars, aes(cyl, mpg)) + geom_point() + ggtheme_plot()
stop("A")
get_table <- function(project = "ucsb-gfw", dataset = NULL, table = NULL, allowLargeResults = TRUE) {
if(is.null(dataset)){stop("Please provide the name of the dataset")}
if(is.null(table)){stop("Please provide the name of the table")}
BQc <- bigrquery::dbConnect(drv = bigrquery::bigquery(),
project = project,
dataset = dataset,
allowLargeResults = allowLargeResults)
DBI::dbListTables(BQc)
table <- dplyr::tbl(BQc, "JPN_tracks") %>%
collect()
return(table)
}
library(startR)
ren <- get_table(dataset = "ren_foreign_fishing", table = "ren_monthly_foreign_fishing")
ren <- get_table(dataset = "foreign_fishing_ren", table = "ren_monthly_foreign_fishing")
library(tidyverse)
ren <- get_table(dataset = "foreign_fishing_ren", table = "ren_monthly_foreign_fishing")
get_table <- function(project = "ucsb-gfw", dataset = NULL, table = NULL, allowLargeResults = TRUE) {
if(is.null(dataset)){stop("Please provide the name of the dataset")}
if(is.null(table)){stop("Please provide the name of the table")}
BQc <- bigrquery::dbConnect(drv = bigrquery::bigquery(),
project = project,
dataset = dataset,
allowLargeResults = allowLargeResults)
DBI::dbListTables(BQc)
table <- dplyr::tbl(BQc, table) %>%
collect()
return(table)
}
ren <- get_table(dataset = "foreign_fishing_ren", table = "ren_monthly_foreign_fishing")
filter(ren, eez_iso3 == "GMB") %>% mutate(date = libridate::date(paste(year, month, 1, sep = "-"))) %>% ggplot(aes(x = date, y = ))
colnames(ren)
filter(ren, eez_iso3 == "GMB") %>% mutate(date = libridate::date(paste(year, month, 1, sep = "-"))) %>% ggplot(aes(x = date, y = hours_by_foreign))
filter(ren, eez_iso3 == "GMB") %>% mutate(date = lubridate::date(paste(year, month, 1, sep = "-"))) %>% ggplot(aes(x = date, y = hours_by_foreign))
filter(ren, eez_iso3 == "GMB") %>% mutate(date = lubridate::date(paste(year, month, 1, sep = "-"))) %>% ggplot(aes(x = date, y = hours_by_foreign)) + geom_line()
ren %>% mutate(date = lubridate::date(paste(year, month, 1, sep = "-"))) %>% ggplot(aes(x = date, y = hours_by_foreign)) + geom_line() + trelliscopejs::facet_trelliscope(~eez_iso3)
ren %>% mutate(date = lubridate::date(paste(year, month, 1, sep = "-"))) %>% ggplot(aes(x = date, y = hours_by_foreign)) + geom_line() + trelliscopejs::facet_trelliscope(~eez_iso3, scales = "free_y")
ren <- ren %>% mutate(date = lubridate::date(paste(year, month, 1, sep = "-")))
colnames(ren)
ren <- select(ren, year, month, date, everything())
ren
ren <- ren %>% mutate(date = lubridate::date(paste(year, month, 15, sep = "-")))
ren
write.csv(ren, file = "ren_monthly_foreign_fishing.csv", row.names = F)
startR::usual_suspects()
library(tidyverse)
viridis
setosa
iris
colnames(iris)
iris$Species %>% unique()
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
# Load some packages
library(startR)
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
?rel
cowplot::theme_cowplot
cowplot::theme_cowplot %>% View()
theme(text = element_text(size = base_size),
axis.text = element_text(size = rel(0.8)),
legend.text = element_text(size = rel(0.8)),
plot.title = element_text(size = rel(1.25)),
panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = base_size),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)}
#' Plot theme
#'
#' @description Creates a standard theme for all my plots
#'
#' @param base_size
#'
#' @export
#'
ggtheme_plot <- function(base_size = 10) {
theme(text = element_text(size = base_size),
axis.text = element_text(size = rel(0.8)),
legend.text = element_text(size = rel(0.8)),
plot.title = element_text(size = rel(1.25)),
panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = base_size),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
}
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm") +
cowplot::theme_cowplot()
ggtheme_plot <- function (font_size = 10, font_family = "", line_size = 0.5) {
half_line <- font_size / 2
small_rel <- 0.857
small_size <- small_rel * font_size
theme_grey(base_size = font_size, base_family = font_family) %+replace%
theme(rect = element_rect(fill = "transparent",
colour = NA,
color = NA,
size = 0,
linetype = 0),
text = element_text(family = font_family,
face = "plain",
colour = "black",
size = font_size,
hjust = 0.5,
vjust = 0.5,
angle = 0,
lineheight = 0.9,
margin = margin(),
debug = FALSE),
axis.text = element_text(colour = "black",
size = small_size),
axis.text.x = element_text(margin = margin(t = small_size / 4),
vjust = 1),
axis.text.y = element_text(margin = margin(r = small_size / 4),
hjust = 1),
axis.title.x = element_text(margin = margin(t = small_size / 2,
b = small_size / 4)),
axis.title.y = element_text(angle = 90,
margin = margin(r = small_size / 2,
l = small_size / 4)),
axis.ticks = element_line(colour = "black", size = line_size),
axis.line = element_line(colour = "black",
size = line_size,
lineend = "square"),
axis.line.x = element_line(colour = "black",
size = line_size,
lineend = "square"),
axis.line.y = element_line(colour = "black",
size = line_size,
lineend = "square"),
legend.background = element_blank(),
legend.key = element_blank(),
legend.key.size = unit(1, "lines"),
legend.spacing = unit(0.4, "cm"),
legend.text = element_text(size = rel(small_rel)),
legend.justification = c("left", "center"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.text = element_text(size = rel(small_rel)),
strip.background = element_blank(),
plot.background = element_blank(),
plot.title = element_text(face = "bold",
size = font_size,
margin = margin(b = half_line)),
complete = TRUE
)
}
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
theme_grey(base_size = font_size, base_family = font_family) %+replace%
theme(rect = element_rect(fill = "transparent",
colour = NA,
color = NA,
size = 0,
linetype = 0),
text = element_text(family = font_family,
face = "plain",
colour = "black",
size = font_size,
hjust = 0.5,
vjust = 0.5,
angle = 0,
lineheight = 0.9,
margin = margin(),
debug = FALSE),
axis.text = element_text(colour = "black",
size = rel(0.8)),
axis.ticks = element_line(colour = "black"),
axis.line = element_line(colour = "black",
size = line_size,
lineend = "square"),
axis.line.x = element_line(colour = "black",
size = line_size,
lineend = "square"),
axis.line.y = element_line(colour = "black",
size = line_size,
lineend = "square"),
legend.background = element_blank(),
legend.key = element_blank(),
legend.key.size = unit(1, "lines"),
legend.spacing = unit(0.4, "cm"),
legend.text = element_text(size = rel(small_rel)),
legend.justification = c("left", "center"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.text = element_text(size = rel(small_rel)),
strip.background = element_blank(),
plot.background = element_blank(),
plot.title = element_text(face = "bold",
size = font_size,
margin = margin(b = half_line)),
complete = TRUE
)
ggtheme_plot <- function (font_size = 10, font_family = "", line_size = 0.5) {
half_line <- font_size / 2
small_rel <- 0.857
small_size <- small_rel * font_size
theme_grey(base_size = font_size, base_family = font_family) %+replace%
theme(rect = element_rect(fill = "transparent",
colour = NA,
color = NA,
size = 0,
linetype = 0),
text = element_text(family = font_family,
face = "plain",
colour = "black",
size = font_size,
hjust = 0.5,
vjust = 0.5,
angle = 0,
lineheight = 0.9,
margin = margin(),
debug = FALSE),
axis.text = element_text(colour = "black",
size = rel(0.8)),
axis.ticks = element_line(colour = "black"),
axis.line = element_line(colour = "black",
size = line_size,
lineend = "square"),
axis.line.x = element_line(colour = "black",
size = line_size,
lineend = "square"),
axis.line.y = element_line(colour = "black",
size = line_size,
lineend = "square"),
legend.background = element_blank(),
legend.key = element_blank(),
legend.key.size = unit(1, "lines"),
legend.spacing = unit(0.4, "cm"),
legend.text = element_text(size = rel(small_rel)),
legend.justification = c("left", "center"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.text = element_text(size = rel(small_rel)),
strip.background = element_blank(),
plot.background = element_blank(),
plot.title = element_text(face = "bold",
size = font_size,
margin = margin(b = half_line)),
complete = TRUE
)
}
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
ggtheme_plot <- function (font_size = 10, font_family = "", line_size = 0.5) {
half_line <- font_size / 2
theme_grey(base_size = font_size, base_family = font_family) %+replace%
theme(rect = element_rect(fill = "transparent",
colour = NA,
color = NA,
size = 0,
linetype = 0),
text = element_text(family = font_family,
face = "plain",
colour = "black",
size = font_size,
hjust = 0.5,
vjust = 0.5,
angle = 0,
lineheight = 0.9,
margin = margin(),
debug = FALSE),
axis.text = element_text(colour = "black",
size = rel(0.8)),
axis.ticks = element_line(colour = "black"),
axis.line = element_line(colour = "black",
size = line_size,
lineend = "square"),
axis.line.x = element_line(colour = "black",
size = line_size,
lineend = "square"),
axis.line.y = element_line(colour = "black",
size = line_size,
lineend = "square"),
legend.background = element_blank(),
legend.key = element_blank(),
legend.key.size = unit(1, "lines"),
legend.spacing = unit(0.4, "cm"),
legend.text = element_text(size = rel(0.8)),
legend.justification = c("left", "center"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.text = element_text(size = rel(0.8)),
strip.background = element_blank(),
plot.background = element_blank(),
plot.title = element_text(face = "bold",
size = font_size,
margin = margin(b = half_line)),
complete = TRUE
)
}
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
source('~/GitHub/startR/R/ggtheme_plot.R')
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width, color = species)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot()
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot() +
labs(x = "Sepal Length (cm)",
y = "Sepal Width (gr)")
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
geom_smooth(method = "lm") +
ggtheme_plot() +
labs(x = "Sepal Length (cm)",
y = "Sepal Width (gr)") +
scale_color_brewer(palette = "Set1")
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(mapping = aes(color = Species)) +
geom_smooth(method = "lm") +
ggtheme_plot() +
labs(x = "Sepal Length (cm)",
y = "Sepal Width (gr)") +
scale_color_brewer(palette = "Set1")
# Set some options
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE,
fig.width = 5,
fig.height = 3)
# Load some packages
library(startR)
library(tidyverse)
ggplot(data = iris,
mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(mapping = aes(color = Species)) +
geom_smooth(method = "lm") +
ggtheme_plot() +
labs(x = "Sepal Length (cm)",
y = "Sepal Width (gr)") +
scale_color_brewer(palette = "Set1")
library(startR)
iris
iris3
iris
?iris
library(startR)
library(rmarkdown)
?draft
#' Create manuscript
#'
#' @param type A string that specifies the type of manuscript between \code{html_document} (the default) and \code{pdf_document}
#'
#' @export
#'
create_manuscript <- function(type = "html"){
if(type == "html"){
rmarkdown::draft(file = "docs/manuscript",
template = "html_manuscript",
package = "startR",
edit = F)
}
if(type == "pdf"){
rmarkdown::draft(file = "docs/manuscript",
template = "pdf_manuscript",
package = "startR",
edit = F)
}
if(type == "eds"){
rmarkdown::draft(file = "docs/manuscript",
template = "eds_manuscript",
package = "startR",
edit = F)
}
library(startR)
devtools::document()
library(startR)
library(devtools)
use_package("tidyverse")
use_package("here")
use_package("rmarkdown")
use_package("magrittr")
use_package("dplyr")
use_package("tidyr")
use_package("ggplot2")
use_package("knitr")
requireNamespace("dplyr", quietly = TRUE)
requireNamespace("dplyr")
library(startR)
use_package("bookdown")
devtools::use_package("bookdown")
iris <- read.csv("data/iris_mythica.csv")
iris
colnames(iris)
rm(iris)
iris
colnames(iris)
iris4 <- read.csv("data/iris_mythica.csv")
colnames(iris4)
unique(iris4$class)
unique(iris$Species)
library(startR)
devtools::document()
library(startR)
devtools::document()
devtools::load_all()
usethis::use_pipe()
# Load new data
iris4 <- read.csv("data/iris_mythica.csv") %>%
dplyr::select(Sepal.Length = sepal.length,
Sepal.Width = sepal.width,
Petal.Length = petal.length,
Petal.Width = petal.width,
Species = class) %>%
dplyr::filter(Species == "Iris-mythica") %>%
mutate(Species = "mythica")
# Load new data
iris4 <- read.csv("data/iris_mythica.csv") %>%
dplyr::select(Sepal.Length = sepal.length,
Sepal.Width = sepal.width,
Petal.Length = petal.length,
Petal.Width = petal.width,
Species = class) %>%
dplyr::filter(Species == "Iris-mythica") %>%
dplyr::mutate(Species = "mythica")
iris4
save(iris4, file = "data/iris_mythica.RData")
library(startR)
data("iris_mythica")
devtools::document()
library(startR)
