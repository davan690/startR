name <- stringr::str_remove(name, " M[^\\w\\s]*B[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^G[^\\w\\s]*V[^\\w]+")  ## mostly in UK
name <- stringr::str_remove(name, "S+F+[^\\w]+G[^\\w\\s]*V[^\\w]*")
name <- stringr::str_remove(name, " G[^\\w\\s]*V[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*V[^\\w]+")  ## in English
name <- stringr::str_remove(name, " M[^\\w\\s]*V[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^M[^\\w\\s]+S[^\\w]+")  ## Merchant Ship
name <- stringr::str_remove(name, " M[^\\w\\s]+S[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*K[^\\w]+")  ## mostly in northern europe
name <- stringr::str_remove(name, " M[^\\w\\s]+K[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^R[^\\w\\s]*V[^\\w]+")  ## Research Vessel
name <- stringr::str_remove(name, " R[^\\w\\s]*V[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^T[^\\w\\s]*T[^\\w]+")  ## Tender To
name <- stringr::str_remove(name, " T[^\\w\\s]*T[^\\w]*($)")
name <- stringr::str_remove(name, "^S[^\\w\\s]*Y[^\\w]+")  ## Steam Yacht
name <- stringr::str_remove(name, " S[^\\w\\s]*Y[^\\w]*($)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*F[^\\w]+")  ## Motor Ferry
name <- stringr::str_remove(name, " M[^\\w\\s]*F[^\\w]*($)")
name <- stringr::str_remove(name, "^S[^\\w\\s]*S[^\\w]+")  ## Steam Ship
name <- stringr::str_remove(name, " S[^\\w\\s]*S[^\\w]*($)")
name <- stringr::str_remove(name, "^S[^\\w\\s]*V[^\\w]+")  ## Sailing Vessel
name <- stringr::str_remove(name, " S[^\\w\\s]*V[^\\w]*($)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*T[^\\w]+")  ## Motor Tanker
name <- stringr::str_remove(name, " M[^\\w\\s]*T[^\\w]*($)")
name <- stringr::str_remove(name, "^M[^\\w\\s]+Y[^\\w]+")  ## Motor Yacht
name <- stringr::str_remove(name, " M[^\\w\\s]+Y[^\\w]*($)")
name <- stringr::str_remove(name, "^[A-Z]/[A-Z][^\\w]+")  ## All other types of X/X
name <- stringr::str_remove(name, " [A-Z]/[A-Z]($)")
name <- stringr::str_remove(name, "^[A-Z]\\\\[A-Z][^\\w]+")  ## All other types of X\X
name <- stringr::str_remove(name, " [A-Z]\\\\[A-Z]($)")
name <- stringr::str_remove(name, "\\(.+\\)")  ## All additional information in parentheses
name <- stringr::str_remove(name, "\\[.+\\]")
## numbers in letters
name <- stringr::str_replace(name, " ONE($)| UNO($)| UN($)", " 1")
name <- stringr::str_replace(name, " TWO($)| DOS($)| DEUX($)", " 2")
name <- stringr::str_replace(name, " THREE($)| TRES($)| TROIS($)", " 3")
name <- stringr::str_replace(name, " FOUR($)| CUATRO($)| QUATRE($)", " 4")
name <- stringr::str_replace(name, " FIVE($)| CINCO($)| CINQ($)", " 5")
name <- stringr::str_replace(name, " SIX($)| SEIS($)| SIX($)", " 6")
name <- stringr::str_replace(name, " SEVEN($)| SIETE($)| SEPT($)", " 7")
name <- stringr::str_replace(name, " EIGHT($)| OCHO($)| HUIT($)", " 8")
name <- stringr::str_replace(name, " NINE($)| NUEVE($)| NEUF($)", " 9")
name <- stringr::str_replace(name, " TEN($)| DIEZ($)| DIX($)", " 10")
name <- stringr::str_replace(name, " ELEVEN($)| ONCE($)| ONZE($)", " 11")
name <- stringr::str_replace(name, " TWELVE($)| DOCE($)| DOUZE($)", " 12")
name <- stringr::str_replace(name, " THIRTEEN($)| TRECE($)| TREIZE($)", " 13")
name <- stringr::str_replace(name, " FOURTEEN($)| CATORCE($)| QUATORZE($)", " 14")
name <- stringr::str_replace(name, " FIFTEEN($)| QUINCE($)| QUINZE($)", " 15")
## country specific appendix (korea)
name <- stringr::str_replace(name, " HO($)", " ")
## remove NO.s such in NO.5, NO5, NO:5, NO. 5, NO 5, N5, N-5 etc
name <- stringr::str_remove(name, "NO[^\\w\\s]*[\\s]*(?=\\d+)")
name <- stringr::str_remove(name, "[\\s]+N[\\W_0]*(?=\\d+)")
name <- stringr::str_remove(name, "NO\\.\\s*(?=[^0-9]+)")
## turn "&" to "AND"
name <- stringr::str_replace(name, "(?<=[A-Z])\\s+&\\s+(?=[A-Z])", " AND ") ## replace "BLACK & WHITE" to "BLACK AND WHITE"
## deromanization
vs <- stringr::str_split(name, "\\s+|-|(?<=[A-Z]{3})\\.")
## if last word from the name text has L/C/D/M then do not deromanize
if (!stringr::str_detect(vs[[1]][length(vs[[1]])], "[LCDM]")){
vs[[1]][length(vs[[1]])] <- as.roman(vs[[1]][length(vs[[1]])])
if(!is.na(vs[[1]][length(vs[[1]])])){
vs[[1]][length(vs[[1]])] <- as.numeric(vs[[1]][length(vs[[1]])])
## attach the deromanized digits to the end
name <- paste(vs[[1]], collapse = " ")
}
## now, remove all special characters
name <- stringr::str_remove(name, "[\\W_]")
## check if the name starts with digits, if yes move it to the end
if(stringr::str_detect(name, "^\\d")){
name <- paste(stringr::str_remove(name, "^\\d+"), stringr::str_extract(name, "^\\d+"))
}
## remove 0s from the numbers starting with 0s
if(stringr::str_detect(name, "\\d+$")){
sufix <- stringr::str_extract(name, "\\d+$")
non_zeros <- stringr::str_remove_all(sufix, "^0+")
name <- stringr::str_replace(name, sufix, non_zeros)
}
name <- stringr::str_remove_all(name, "[[:punct:]]+")
name <- stringr::str_squish(name)
name <- stringr::str_trim(name)
if (name == ""){return(NA)}
return(name)
}
result = normalize_shipname("weird -+%()<>$;!&'`\\.#/")
result
name <- stringr::str_remove_all(name, "[^[:alnum:]]")
name
source('~/GitHub/startR/R/normalize_shipname.R', echo=TRUE)
normalize_shipname <- function(name) {
if (is.na(name) | (name != name) | (name == "")){
return(NA)
}
## turn to upper cases
name <- toupper(name)
## remove nasty charcters, white space
name <- UnidecodeR::unidecode(name, language = "all")
name <- stringr::str_squish(name)
name <- stringr::str_trim(name)
name <- stringr::str_remove(name, "\n")
name <- stringr::str_remove(name, "\r")
## remove fishing vessel code
name <- stringr::str_remove(name, "MFV[^\\w]+") ## fishing vessel code in English
name <- stringr::str_remove(name, "MPV[^\\w]+") ## fishing vessel code in English
name <- stringr::str_remove(name, "HMS[^\\w]+") ## fishing vessel code in English
name <- stringr::str_remove(name, "LPG[/|C]*[\\W]*|LNG[/|C]*[\\W]*") ## LPG/LNG variations
name <- stringr::str_remove(name, "(\\s|^)F[^\\w\\s]*V[^\\w]*")  ## fishing vessel code in English (F/V, F-V, F.V, FV: etc)
name <- stringr::str_remove(name, "^F[^\\w\\s]*B[^\\w]+")  ## fishing vessel code in English
name <- stringr::str_remove(name, " F[^\\w\\s]*B[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*P[^\\w]+")  ## fishing vessel code in Italy/Spain
name <- stringr::str_remove(name, " M[^\\w\\s]*P[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*B[^\\w]+")  ## fishing vessel code in Italy/Spain
name <- stringr::str_remove(name, " M[^\\w\\s]*B[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^G[^\\w\\s]*V[^\\w]+")  ## mostly in UK
name <- stringr::str_remove(name, "S+F+[^\\w]+G[^\\w\\s]*V[^\\w]*")
name <- stringr::str_remove(name, " G[^\\w\\s]*V[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*V[^\\w]+")  ## in English
name <- stringr::str_remove(name, " M[^\\w\\s]*V[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^M[^\\w\\s]+S[^\\w]+")  ## Merchant Ship
name <- stringr::str_remove(name, " M[^\\w\\s]+S[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*K[^\\w]+")  ## mostly in northern europe
name <- stringr::str_remove(name, " M[^\\w\\s]+K[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^R[^\\w\\s]*V[^\\w]+")  ## Research Vessel
name <- stringr::str_remove(name, " R[^\\w\\s]*V[^\\w]*(\\s|$)")
name <- stringr::str_remove(name, "^T[^\\w\\s]*T[^\\w]+")  ## Tender To
name <- stringr::str_remove(name, " T[^\\w\\s]*T[^\\w]*($)")
name <- stringr::str_remove(name, "^S[^\\w\\s]*Y[^\\w]+")  ## Steam Yacht
name <- stringr::str_remove(name, " S[^\\w\\s]*Y[^\\w]*($)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*F[^\\w]+")  ## Motor Ferry
name <- stringr::str_remove(name, " M[^\\w\\s]*F[^\\w]*($)")
name <- stringr::str_remove(name, "^S[^\\w\\s]*S[^\\w]+")  ## Steam Ship
name <- stringr::str_remove(name, " S[^\\w\\s]*S[^\\w]*($)")
name <- stringr::str_remove(name, "^S[^\\w\\s]*V[^\\w]+")  ## Sailing Vessel
name <- stringr::str_remove(name, " S[^\\w\\s]*V[^\\w]*($)")
name <- stringr::str_remove(name, "^M[^\\w\\s]*T[^\\w]+")  ## Motor Tanker
name <- stringr::str_remove(name, " M[^\\w\\s]*T[^\\w]*($)")
name <- stringr::str_remove(name, "^M[^\\w\\s]+Y[^\\w]+")  ## Motor Yacht
name <- stringr::str_remove(name, " M[^\\w\\s]+Y[^\\w]*($)")
name <- stringr::str_remove(name, "^[A-Z]/[A-Z][^\\w]+")  ## All other types of X/X
name <- stringr::str_remove(name, " [A-Z]/[A-Z]($)")
name <- stringr::str_remove(name, "^[A-Z]\\\\[A-Z][^\\w]+")  ## All other types of X\X
name <- stringr::str_remove(name, " [A-Z]\\\\[A-Z]($)")
name <- stringr::str_remove(name, "\\(.+\\)")  ## All additional information in parentheses
name <- stringr::str_remove(name, "\\[.+\\]")
## numbers in letters
name <- stringr::str_replace(name, " ONE($)| UNO($)| UN($)", " 1")
name <- stringr::str_replace(name, " TWO($)| DOS($)| DEUX($)", " 2")
name <- stringr::str_replace(name, " THREE($)| TRES($)| TROIS($)", " 3")
name <- stringr::str_replace(name, " FOUR($)| CUATRO($)| QUATRE($)", " 4")
name <- stringr::str_replace(name, " FIVE($)| CINCO($)| CINQ($)", " 5")
name <- stringr::str_replace(name, " SIX($)| SEIS($)| SIX($)", " 6")
name <- stringr::str_replace(name, " SEVEN($)| SIETE($)| SEPT($)", " 7")
name <- stringr::str_replace(name, " EIGHT($)| OCHO($)| HUIT($)", " 8")
name <- stringr::str_replace(name, " NINE($)| NUEVE($)| NEUF($)", " 9")
name <- stringr::str_replace(name, " TEN($)| DIEZ($)| DIX($)", " 10")
name <- stringr::str_replace(name, " ELEVEN($)| ONCE($)| ONZE($)", " 11")
name <- stringr::str_replace(name, " TWELVE($)| DOCE($)| DOUZE($)", " 12")
name <- stringr::str_replace(name, " THIRTEEN($)| TRECE($)| TREIZE($)", " 13")
name <- stringr::str_replace(name, " FOURTEEN($)| CATORCE($)| QUATORZE($)", " 14")
name <- stringr::str_replace(name, " FIFTEEN($)| QUINCE($)| QUINZE($)", " 15")
## country specific appendix (korea)
name <- stringr::str_replace(name, " HO($)", " ")
## remove NO.s such in NO.5, NO5, NO:5, NO. 5, NO 5, N5, N-5 etc
name <- stringr::str_remove(name, "NO[^\\w\\s]*[\\s]*(?=\\d+)")
name <- stringr::str_remove(name, "[\\s]+N[\\W_0]*(?=\\d+)")
name <- stringr::str_remove(name, "NO\\.\\s*(?=[^0-9]+)")
## turn "&" to "AND"
name <- stringr::str_replace(name, "(?<=[A-Z])\\s+&\\s+(?=[A-Z])", " AND ") ## replace "BLACK & WHITE" to "BLACK AND WHITE"
## deromanization
vs <- stringr::str_split(name, "\\s+|-|(?<=[A-Z]{3})\\.")
## if last word from the name text has L/C/D/M then do not deromanize
if (!stringr::str_detect(vs[[1]][length(vs[[1]])], "[LCDM]")){
vs[[1]][length(vs[[1]])] <- as.roman(vs[[1]][length(vs[[1]])])
if(!is.na(vs[[1]][length(vs[[1]])])){
vs[[1]][length(vs[[1]])] <- as.numeric(vs[[1]][length(vs[[1]])])
## attach the deromanized digits to the end
name <- paste(vs[[1]], collapse = " ")
}
## now, remove all special characters
name <- stringr::str_remove(name, "[\\W_]")
## check if the name starts with digits, if yes move it to the end
if(stringr::str_detect(name, "^\\d")){
name <- paste(stringr::str_remove(name, "^\\d+"), stringr::str_extract(name, "^\\d+"))
}
## remove 0s from the numbers starting with 0s
if(stringr::str_detect(name, "\\d+$")){
sufix <- stringr::str_extract(name, "\\d+$")
non_zeros <- stringr::str_remove_all(sufix, "^0+")
name <- stringr::str_replace(name, sufix, non_zeros)
}
name <- stringr::str_remove_all(name, "[^[:alnum:]]")
name <- stringr::str_squish(name)
name <- stringr::str_trim(name)
if (name == ""){return(NA)}
return(name)
}
result = normalize_shipname("weird -+%()<>$;!&'`\\.#/")
result
result = normalize_shipname("weird -+%()<>$;!&'`\\.#/")
result == "WEIRD"
result = normalize_shipname("  \tspaced  \nname      ")
result == "SPACEDNAME"
result = normalize_shipname("f/b boat f/v othername")
result == "BOATOTHERNAME"
result = normalize_shipname("r/v boat othername")
result == "BOATOTHERNAME"
result = normalize_shipname("no. boat")
result == "BOAT"
result = normalize_shipname("no537 boat")
result == 'BOAT537'
result = normalize_shipname("boat IX")
result == "BOAT9"
result = normalize_shipname("")
result == NA
is.na(result)
result = normalize_shipname("a")
result == "A"
result = normalize_shipname("no")
result == "NO"
devtools::use_testthat()
install.packages("testthat")
devtools::use_testthat()
library(testthat)
person("Juan Carlos", "Villaseñor-Derbez", email = "juancarlos@ucsb.edu",
role = c("aut", "cre"))
expect_equal(normalize_shipname("MixEd"), "MIXED")
normalize_shipname("MixEd"), "MIXED"
normalize_shipname("MixEd")
devtools::test()
## if last word from the name text has L/C/D/M then do not deromanize
if (!stringr::str_detect(vs[[1]][length(vs[[1]])], "[LCDM]")){
if(stringr::str_detect(vs[[1]][length(vs[[1]])], "[IVX]")){
vs[[1]][length(vs[[1]])] <- as.roman(vs[[1]][length(vs[[1]])])
if(!is.na(vs[[1]][length(vs[[1]])])){
vs[[1]][length(vs[[1]])] <- as.numeric(vs[[1]][length(vs[[1]])])
## attach the deromanized digits to the end
name <- paste(vs[[1]], collapse = " ")
}
devtools::test()
?import
?roxygen
?roxygen2
devtools::document()
UnidecodeR::get_transliterations(language = "all")
UnidecodeR::get_transliterations(language = "german")
UnidecodeR::get_transliterations(language = "english")
UnidecodeR::get_transliterations(language = "slovene")
UnidecodeR::get_transliterations(language = "sl")
UnidecodeR::get_transliterations(language = "all")
UnidecodeR::unidecode(name, language = "all")
name
name <- "MiXeD524"
UnidecodeR::unidecode(name, language = "all")
unidecode(name, language = "all")
UnidecodeR::unidecode(name, language = "all")
unidecode(name, language = "all")
library(UnidecodeR)
unidecode(name, language = "all")
name <- "MiXeD524"
unidecode(name, language = "all")
source('~/GitHub/startR/R/ggtheme_plot.R')
devtools::document()
library(startR)
normalize_shipname("MFV weird -+%()<>$;!&'\\.#/ boatname IV")
normalize_shipname("weird -+%()<>$;!&'`\\.#/boat name IV")
startR::normalize_shipname("weird -+%()<>$;!&'`\\.#/boat name IV")
devtools::document()
devtools::test()
devtools::document()
devtools::test()
devtools::document()
devtools::test()
devtools::document()
devtools::test()
expect_equal(normalize_shipname("no"), "NO")
devtools::document()
devtools::test()
devtools::document()
devtools::test()
devtools::document()
devtools::test()
devtools::document()
devtools::test()
devtools::document()
devtools::test()
devtools::document()
devtools::test()
Encoding("a")
enc2utf8("a")
enc2utf8("á")
devtools::document()
devtools::test()
devtools::document()
devtools::test()
source('~/GitHub/startR/R/normalize.R')
normalize_callsign("weird -+%()<>$;!&'`\\.#/")
#' @export
#' @rdname normalize
normalize_callsign <- function(callsign) {
if (is.na(callsign) | (callsign != callsign) | (callsign == "")){
return(NA)
}
## turn to upper cases
callsign <- toupper(callsign)
## remove nasty charcters, white space
callsign <- unidecode(callsign, language = "all") %>%
enc2utf8() %>%
str_squish() %>%
str_trim() %>%
str_remove("\n") %>%
str_remove("\r") %>%
str_remove("[^[:alnum:]]") %>% # Remove non-word characters
str_remove("^0+") # Remove zeroes at the start
if(callsign == ""){return(NA)}
return(callsign)
}
normalize_callsign("weird -+%()<>$;!&'`\\.#/")
#' @export
#' @rdname normalize
normalize_callsign <- function(callsign) {
if (is.na(callsign) | (callsign != callsign) | (callsign == "")){
return(NA)
}
## turn to upper cases
callsign <- toupper(callsign)
## remove nasty charcters, white space
callsign <- unidecode(callsign, language = "all") %>%
enc2utf8() %>%
str_squish() %>%
str_trim() %>%
str_remove("\n") %>%
str_remove("\r") %>%
str_remove_all("[^[:alnum:]]") %>% # Remove non-word characters
str_remove("^0+") # Remove zeroes at the start
if(callsign == ""){return(NA)}
return(callsign)
}
normalize_callsign("weird -+%()<>$;!&'`\\.#/")
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::test()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
library(startR)
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
?normalize
library(startR)
?normalize
source('~/GitHub/startR/R/normalize.R')
?normalize
library(startR)
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
?bind
source('~/GitHub/startR/R/normalize.R')
?bind
devtools::document()
roxygen2::roxygenize()
grow <- function(N, r, K){
N <- N * e^(r * (1 - N / K))
}
grow <- function(N, r, K){
N <- N * e^(r * (1 - N / K))
}
r <- 0.9
K <- 1e6
N0 <- 1000
grow <- function(N, r, K){
N <- N * e^(r * (1 - N / K))
return(N)
}
r <- 0.9
K <- 1e6
N0 <- 1000
grow(N = N0, r = r, K = K)
grow <- function(N, r, K){
N <- N * exp(r * (1 - N / K))
return(N)
}
r <- 0.9
K <- 1e6
N0 <- 1000
grow(N = N0, r = r, K = K)
N <- 1000
nyears <- 100
N
for(i in 1:nyears){
N <- grow(N = N, r = r, K = K)
print(N)
}
nyears <- 20
for(i in 2:nyears){
Nt[i] <- grow(N[i-1] = N, r = r, K = K)
}
Nt[i] <- grow(N = N[i-1], r = r, K = K)
for(i in 2:nyears){
N[i] <- grow(N = N[i-1], r = r, K = K)
}
plot(N)
N
N <- 1000
grow(N = N0, r = r, K = K)
nyears <- 20
for(i in 2:nyears){
N[i] <- grow(N = N[i-1], r = r, K = K)
}
plot(N)
for(i in 2:nyears){
N[i] <- grow(N = N[i-1], r = r, K = K) - 0.2*N[i-1]
}
N <- 1000
grow(N = N0, r = r, K = K)
nyears <- 20
for(i in 2:nyears){
N[i] <- grow(N = N[i-1], r = r, K = K) - 0.2*N[i-1]
}
plot(N)
K <- 1e6
N <- 1000
grow(N = N0, r = r, K = K)
nyears <- 20
for(i in 2:nyears){
N[i] <- grow(N = N[i-1], r = r, K = K) - 0.8*N[i-1]
}
plot(N)
grow <- function(N, r, K, theta){
N <- N * exp(theta * r * (1 - N / K))
return(N)
}
theta <- 1:nyears
theta
theta <- (1:nyears) / 10
theta
N <- 1000
grow(N = N0, r = r, K = K)
nyears <- 20
for(i in 2:nyears){
N[i] <- grow(N = N[i-1], r = r, K = K, theta = theta[i]) - 0.8*N[i-1]
}
plot(N)
nyears <- 5
theta <- (1:nyears) / 10
for(i in 2:nyears){
N[i] <- grow(N = N[i-1], r = r, K = K, theta = theta[i]) - 0.8*N[i-1]
}
plot(N)
N <- 1000
grow(N = N0, r = r, K = K)
nyears <- 5
theta <- (1:nyears) / 10
for(i in 2:nyears){
N[i] <- grow(N = N[i-1], r = r, K = K, theta = theta[i]) - 0.8*N[i-1]
}
plot(N)
sessionInfo()
library(tidyr)
library(dplyr)
sessionInfo()
devtools::document()
create_readme(repo = "startR: My personal helper functions")
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
devtools::test()
library(startR)
?normalize
source('~/GitHub/startR/R/normalize.R')
?devtools::document
source('~/GitHub/startR/R/normalize.R')
devtools::document()
?normalize
library(startR)
?normalize
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
source('~/GitHub/startR/R/normalize.R')
devtools::document()
?normalize
library(startR)
?normalize
source('~/GitHub/startR/R/normalize.R')
devtools::document()
library(startR)
?normalize
source('~/GitHub/startR/R/normalize.R')
devtools::document()
?normalize
library(startR)
?normalize
source('~/GitHub/startR/R/normalize.R')
devtools::document()
